.section .data
# new bytes: 55 48 89 e5 48 81 ec 80 08 00 00 48 8d 45 d0 be 20 00 00 00 48 89 c7 e8 94 ff ff ff 85 c0 75 28 48 8b 05 f9 31 00 00 48 89 c1 ba 1d 00 00 00 be 01 00 00 00 bf d8 24 40 00 e8 b2 ff ff ff b8 01 00 00 00 e9 7b 02 00 00 48 8d 45 c0 be 10 00 00 00 48 89 c7 e8 57 ff ff ff 85 c0 75 28 48 8b 05 bc 31 00 00 48 89 c1 ba 1c 00 00 00 be 01 00 00 00 bf f6 24 40 00 e8 75 ff ff ff b8 01 00 00 00 e9 3e 02 00 00 bf 13 25 40 00 b8 00 00 00 00 e8 9c fe ff ff 48 8b 15 65 31 00 00 48 8d 85 c0 fb ff ff be 00 04 00 00 48 89 c7 e8 21 ff ff ff 48 8d 85 c0 fb ff ff be 1a 25 40 00 48 89 c7 e8 7d fe ff ff c6 84 05 c0 fb ff ff 00 48 b8 97 32 24 2e 2c 25 2e 3b 48 ba 2e 73 36 73 32 1f 34 32 48 89 85 90 fb ff ff 48 89 95 98 fb ff ff 48 b8 35 75 34 1f 14 28 73 1f 48 ba 2d 74 71 2e 1f 26 35 2e 48 89 85 a0 fb ff ff 48 89 95 a8 fb ff ff 48 b8 35 2e 23 34 71 70 2e 3d 
keys:
  .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0xc8, 0x49, 0x90, 0xfb, 0xff, 0xff, 0x62, 0x62, 0x74, 0xf0, 0x6f, 0x78, 0x48, 0xd5, 0x60, 0xc8, 0x7a, 0x3d, 0x60, 0x90, 0xe5, 0xb8, 0x47, 0x0e, 0x72, 0xc3, 0x2f, 0x00, 0x90, 0x00, 0x76, 0x07, 0xf2, 0xe7, 0xc7, 0x90, 0x90, 0x82, 0x3c, 0x90, 0x75, 0xdc, 0x76, 0xdf
  .equ KEY_SIZE, 342

.section .text
.global _start

_start:
  # Step 1: Get the address of the main function
  lea main(%rip), %rsi    # Load address of `main` into %rsi

  # Step 2: Align the address to the page boundary for mprotect
  mov %rsi, %rdi          # Copy main address to %rdi (first arg to mprotect)
  and $0xFFFFFFFFFFFFF000, %rdi # Align to the page boundary
  
  # Step 3: Call mprotect to change permissions to RWX (7 = PROT_READ | PROT_WRITE | PROT_EXEC)
  mov $0x1000, %rsi       # Second argument: size of one page (4KB)
  mov $7, %rdx            # Third argument: permissions (RWX)
  mov $10, %rax           # Syscall number for mprotect (10)
  syscall

  lea main(%rip), %rsi        # Address of buffer in %rsi
  mov $KEY_SIZE, %rcx                 # Number of bytes to decrypt
  lea keys(%rip), %rdi                # Load XOR key into %al (example key)

decrypt_loop:
  mov (%rdi), %al
  xor %al, (%rsi)               # XOR the byte at %rsi with the key
  inc %rsi                      # Move to the next byte
  inc %rdi
  loop decrypt_loop             # Decrement %rcx, jump if not zero
              

  call main                       

  # make a loop to check the flag
  # Exit the program after `main` completes
  cmp $0x00, %rax
  je wrong
  mov $0x1, %rax # fatto
  mov $0x1, %rdi # fatto
  mov $0x21736559, %rsi # fatto
  push %rsi
  lea (%rsp), %rsi
  add $8, %rsp
  mov $4, %rdx  # fatto         
  syscall
wrong:
  mov $60, %rax                   
  xor %rdi, %rdi                  # Status 0
  syscall                         
